The first step in parsing a source file is to sanitize it, which involves removing all comments entirely.

After that, the code is verified and tokenized using the following EBNF:

whitespace = { ? all white space including newlines ? }

limited expression = literal | function application | function creation | block | implication | name | control flow ;
full expression = tier list | limited expression ;
function expression = full expression - literal ;
expression = [ whitespace ] , full expression , [ white space] ;

literal = string literal | integer literal | float literal | bool literal | "forever alone" ;
string literal = '"' , { string character } , '"' ;
string character = ? all characters except \ and " ? | "\\" | '\"' ;
integer literal = [ "-" ] , digit , { digit } ;
float literal = [ "-" ] , { digit } , "." , digit , { digit } ;
digit = ? digits from 0 to 9 ? ;
bool literal = "true" | "false" | "on" | "off" | "yes" | "no" ;

name = [ whitespace ] , name start , { name body } , [ whitespace ]
name start = ? any char except - > . " { } ( ) , ; digits whitespace or control characters ? ;
name body = name start | digit | "-" ;

implication = declaration | creation | assignment ;
declaration = ">implying" , name ;
creation = declaration , "isn't" , expression ;
assignment = declaration , "wasn't" , expression ;

function creation = ">function" , function names , expression ;
function names = "" | "(" , { name } , ")" ;
function application = ">" , function expression , { expression } , ";" ;

block = "{" , block contents , "}" ;
block contents = { [white] , expression , [white] } ;

control flow = gb2 | noko | sage | jpg ;
gb2 = "gb2 " , expression ;
noko = "noko ", expression ;
sage = "sage ", expression ;
jpg = ">" , expression , ".jpg" ;

tier list = tier , { tier } , "100% accurate" ;
tier = condition , "TIER:" , expression ;
condition = [ whitespace ] , limited expression , [ whitespace ] ;

source file = [white] , block contents , [white] ;
